컨테이너를 배워야 하는 이유
- 과거 엔터프라이즈 시장에서 대용량 베어메탈 (*하드웨어 상에 어떤 소프트웨어도 설치되어 있지 않은 상태) 시스템에 여러개의 어플리케이션을 운영했던 구조로 사용해옴

- 시대적 변화로 인하여 하드웨어는 가격이 저렴, 운영 플랫폼 시스템은 대용량으로 늘어나기에 베어메탈 시스템에 Hypervisor X 라는 S/W 적인 기술을 통해 가상 virtual machine을 만들어서 필요한 어플리케이션을 올려서 사용하는 구조로 써옴. 이게 가상화 플랫폼.

- 또 시간흐름에 따라 다양한 어플리케이션 운영에 따라 필요에 따라서 스케일 아웃 및 인을 통한 어플리케이션 요구들이 필요하게됨. 무중단 서비스가 필요하다보니 기존의 가상화 환경을 통한 운영에 어려웁이 생김. 그렇기에 같은 베어메탈 시스템에 OS를 올리고 컨테이너 엔진을 올리게 됨. 도커는 이 컨테이너 엔진중에 하나임. 격리된 공간에서 프로그램이 실행되기에 확장성에 용이하게됨. 그렇기에 컨테이너를 사용하게 되는 시대가 옴.



개발자 관점에서 컨테이너
- 상식적인 컨테이너를 생각해보면 컨테이너안에는 다양한 수출 및 수입 제품이 담겨있을수 있음. 이러한 제품중 열대과일도 있고, 냉동 제품들도 있는데 각각의 보관환경을 달리 할 필요가 있다. 그렇기에 컨테이너안에 각각의 보관환경에 따라 공간을 나누고 제품을 넣어서 보관을 할도록 컨테이너에 미리 설비를 해놓고 제품을 넣어 유통하는것 상식적인 컨테이너의 역할임

- 소프트웨어의 컨테이너는 어플리케이션을 운영시 동작을 할 때 필요로 하는 환경을 설비. 각각의 서비스 실행이 가능한 플랫폼을 컨테이너에 준비를 하고 어플리케이션을 동작시켜주는 독립된 공간을 컨테이너라고 한다. 



컨테이너는 리눅스에서 돌려야할까?
- 컨테이너는 리눅스 커널의 기능을 통해 만들어졌음

- 리눅스 커널의 기능 (이러한 기능을 바탕으로 컨테이너가 만들어짐)

   - chroot : 독립된 공간 형성

   - namespace : 독립된 공간안에 6가지 isolate 기능을 지원해주는것.

   - cgroup : 필요한만큼 HW 지원

- 리눅스 커널의 stroage, namespaces, networking의 기능들을 통하여 도커플랫폼에서 사용가능하도록 지원해주는게 컨테이너 엔진이됨.

- window, mac os에서 일반적으로는 컨테이너를 실행시킬수는 없고 Hypervisor를 활성화하여 컨테이너를 실행시킬수있음.

- 리눅스는 리눅스 커널이 있기에 바로 도커플랫폼을 사용이 가능하다.



일반적인 프로그램과 컨테이너의 차이점
- 일반적으로 하는 업무는 같음 (Ex. 웹서버의 역할, 웹기반 App 등의 기능은 같음)

- 차이점은 모양이 다르다. 

- 일반 프로그램의 경우 x 를 실행하고자 하면 x를 로컬환경에 설치하여 실행하도록 한다.

- 컨테이너의 경우에는 같은 x 어플리케이션을 실행하고 하면 x 소스를 가진 파일 해석할수있는 환경을 설치해줌. 다음으로 만들어놓은 x를 저장하고 실행해주는것을 빌드함.



컨테이너 기반으로 사용하는 이유
- 개발자가 만든 프로그램을 어디서든 돌아가게 하기 위함.

- 확장 및 축소(scale-out, in)가 쉽고 MSA 아키텍쳐, Devops에 적합하기 때문에 사용.











